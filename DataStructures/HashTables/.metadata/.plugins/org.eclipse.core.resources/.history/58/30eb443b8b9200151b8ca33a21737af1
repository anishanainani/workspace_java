public abstract class HashTable<Key, Value>{
	ArrayList<Key> keySet;
	ArrayList<Key> valueSet;
	int tableSize;
	public abstract void put(Key k, Value v);
	public abstract Value get(Key key);
	public boolean containsKey(Key key){
		return keySet.contains(key);
	}
	public class Node<Key, Value>{
		Key key;
		Value value;
	}
}

public class HashTableChaining<Key,Value> extends HashTable<Key,Value>{
	ArrayList<LinkedList<Node> > hashtable;

	public HashTableChaining(){
		tableSize = 101;
		hashtable = new ArrayList<LinkedList<Node> >(tableSize);
	}

	int hash(Key key){
		int hashVal = 0;

		for(int i = 0; i < key.length(); ++i){
			hashValue += 37*hashValue+(int)key.charAt(i);
		}
		hashValue%=tableSize;
		if(hashValue<0){
			hashValue+=tableSize;
		}
		return hashValue;
	}

	public void put(Key key, Value value){
		int hash = hash(key);
		if(hashtable.get(hash) == null){
			hashtable.add(hash, new LinkedList<Node>());
		}
		if(containsKey(key)){
			LinkedList<Node> list = hashtable.get(hash);
			for(int i =0; i<list.size(); ++i){
				if(list.get(i).key.equals(key)){
					list.get(i).value = value;
				}
			}
		} else {
			hashtable.get(hash).add(new Node(key, value));
			keySet.add(key);
		}
	}
}