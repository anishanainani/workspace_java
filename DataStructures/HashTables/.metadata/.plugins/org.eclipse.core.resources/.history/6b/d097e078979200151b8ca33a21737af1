import java.util.ArrayList;
import java.util.LinkedList;



public class HashTableOpenAddressing<Key,Value> extends HashTable<Key,Value> {
	ArrayList<Node> hashtable;

	public HashTableOpenAddressing(){
		tableSize = 101;
		
		hashtable = new ArrayList<Node>();
		for(int i = 0; i < tableSize; ++i){
			hashtable.add(new Node());
		}
		//System.out.println(hashtable.size());
		
		keySet = new ArrayList<Key>();
	}

	int hash1(String key, int t){
		int hashValue = 0;

		for(int i = 0; i < key.length(); ++i){
			hashValue += 37*hashValue+(int)key.charAt(i);
		}
		hashValue%=t;
		if(hashValue<0){
			hashValue+=t;
		}
		return hashValue;
	}
	
	int hash2(String key, int t){
		int hashValue = 0;

		for(int i = 0; i < key.length(); ++i){
			hashValue += 37*hashValue+(int)key.charAt(i);
		}
		hashValue= t-hashValue%t;
		if(hashValue<0){
			hashValue+=t;
		}
		return hashValue;
	}
	
	int double_hash(Key key,int i){
		int hash1 = hash1(key.toString(),tableSize);
		int hash2 = hash2(key.toString(),tableSize+1);
		
		int hash = (hash1+i*hash2)%tableSize;
		if(hash<0){
			hash+=tableSize;
		}
		return hash;
		
		
	}

	public void put(Key key, Value value){
		
		int i = 0;
		if(containsKey(key)){
			while(true){
				int hash = double_hash(key,i);
				if(hashtable.get(hash)==null || hashtable.get(hash).type==nodeType.DELETED){
					
				}
			}
		} else {
			if(hashtable.get(hash)!=null){
					hashtable.add(hash,new Node(key,value));
					
				}
			}
		}
		
	}
	
	public Value get(Key key){

		if(!containsKey(key)){
			return null;
		}
		int hash = hash(key.toString());
		
		LinkedList<Node> list = hashtable.get(hash);
		for(int i =0; i<list.size(); ++i){
			if(list.get(i).key.equals(key)){
				return list.get(i).value;
			}
		}
		
		return null;
	}

}
